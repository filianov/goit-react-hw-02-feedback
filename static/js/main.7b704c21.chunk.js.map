{"version":3,"sources":["Components/Feedback/Feedbackbuttons.jsx","Components/Feedback/FeedbackOptions.jsx","Components/Section/Section.jsx","Components/Notification/Notification.jsx","Components/Statistics/Statistics.jsx","App.js","index.js"],"names":["Feedbackbutton","option","onLeaveFeedback","type","name","onClick","FeedbackOptions","options","good","neutral","bad","Section","title","Notification","message","Statistics","isOpen","total","positivePercentage","App","state","handleFeedbackIncrement","e","target","setState","props","step","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","this","positiveFeedback","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAceA,EAXQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,gBAAX,OACrB,4BAAQC,KAAK,SAASC,KAAMH,EAAQI,QAASH,GAC1CD,ICeUK,EAhBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASL,EAAZ,EAAYA,gBAAZ,OACtB,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAgBD,OAAQM,EAAQC,KAAMN,gBAAiBA,IACvD,kBAAC,EAAD,CACED,OAAQM,EAAQE,QAChBP,gBAAiBA,IAEnB,kBAAC,EAAD,CAAgBD,OAAQM,EAAQG,IAAKR,gBAAiBA,MCO3CS,EAdC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOV,EAAV,EAAUA,gBAAiBK,EAA3B,EAA2BA,QAA3B,OACd,6BACGK,EACD,6BACA,kBAAC,EAAD,CAAiBV,gBAAiBA,EAAiBK,QAASA,MCCjDM,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAMA,ICwC7BC,EAvCI,SAAC,GAAD,IACjBC,EADiB,EACjBA,OACAR,EAFiB,EAEjBA,KACAC,EAHiB,EAGjBA,QACAC,EAJiB,EAIjBA,IACAO,EALiB,EAKjBA,MACAC,EANiB,EAMjBA,mBANiB,OAQjB,kBAAC,WAAD,KACGF,EACC,kBAAC,WAAD,KACE,0CACA,sCAAYR,GACZ,6BACA,yCAAeC,GACf,6BACA,qCAAWC,GACX,6BACA,uCAAaO,GACb,6BACA,kDAAwBC,EAAxB,MAGF,6BACE,kBAAC,EAAD,CAAcJ,QAAQ,yBCvBTK,E,4MACnBC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,EACLM,QAAQ,G,EAUVK,wBAA0B,SAAAC,GACF,SAAlBA,EAAEC,OAAOnB,KACX,EAAKoB,UAAS,SAAAJ,GAAK,MAAK,CACtBZ,KAAMY,EAAMZ,KAAO,EAAKiB,MAAMC,KAC9BV,QAAQ,MAEe,YAAlBM,EAAEC,OAAOnB,KAChB,EAAKoB,UAAS,SAAAJ,GAAK,MAAK,CACtBX,QAASW,EAAMX,QAAU,EAAKgB,MAAMC,KACpCV,QAAQ,MAEe,QAAlBM,EAAEC,OAAOnB,MAChB,EAAKoB,UAAS,SAAAJ,GAAK,MAAK,CACtBV,IAAKU,EAAMV,IAAM,EAAKe,MAAMC,KAC5BV,QAAQ,O,EAIdW,mBAAqB,WACnB,OAAO,EAAKP,MAAMZ,KAAO,EAAKY,MAAMX,QAAU,EAAKW,MAAMV,K,EAG3DkB,gCAAkC,WAChC,OAA2B,IAApB,EAAKR,MAAMZ,MAEb,EAAKY,MAAMZ,MACT,EAAKY,MAAMZ,KAAO,EAAKY,MAAMX,QAAU,EAAKW,MAAMV,KACrD,KACAmB,QAAQ,GACR,K,uDAGI,IACApB,EAAYqB,KAAKV,MAAjBX,QACAD,EAASsB,KAAKV,MAAdZ,KACAE,EAAQoB,KAAKV,MAAbV,IACAM,EAAWc,KAAKV,MAAhBJ,OACFC,EAAQa,KAAKH,qBACbI,EAAmBD,KAAKF,kCAE9B,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACEhB,MAAM,wBACNV,gBAAiB4B,KAAKT,wBACtBd,QAASY,EAAIZ,UAGf,kBAAC,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLO,MAAOA,EACPD,OAAQA,EACRE,mBAAoBa,S,GArEGC,aAAZb,EAQZc,aAAe,CACpBP,KAAM,EACNK,iBAAkB,GAVDZ,EAaZZ,QAAU,CAAEC,KAAM,OAAQC,QAAS,UAAWC,IAAK,OCb5DwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.7b704c21.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Feedbackbutton = ({ option, onLeaveFeedback }) => (\n  <button type=\"button\" name={option} onClick={onLeaveFeedback}>\n    {option}\n  </button>\n);\n\nFeedbackbutton.propTypes = {\n  option: PropTypes.string.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default Feedbackbutton;\n","import React, { Fragment } from 'react';\nimport Feedbackbutton from './Feedbackbuttons';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <Fragment>\n    <Feedbackbutton option={options.good} onLeaveFeedback={onLeaveFeedback} />\n    <Feedbackbutton\n      option={options.neutral}\n      onLeaveFeedback={onLeaveFeedback}\n    />\n    <Feedbackbutton option={options.bad} onLeaveFeedback={onLeaveFeedback} />\n  </Fragment>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport FeedbackOptions from '../Feedback/FeedbackOptions';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, onLeaveFeedback, options }) => (\n  <div>\n    {title}\n    <br />\n    <FeedbackOptions onLeaveFeedback={onLeaveFeedback} options={options} />\n  </div>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.object.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <div>{message}</div>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Fragment } from 'react';\nimport Notification from '../Notification/Notification';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({\n  isOpen,\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) => (\n  <Fragment>\n    {isOpen ? (\n      <Fragment>\n        <h2>Statictics</h2>\n        <span>Good:{good}</span>\n        <br />\n        <span>Neutral:{neutral}</span>\n        <br />\n        <span>Bad:{bad}</span>\n        <br />\n        <span>Total:{total}</span>\n        <br />\n        <span>Positive feedbak:{positivePercentage}%</span>\n      </Fragment>\n    ) : (\n      <div>\n        <Notification message=\"No feedback given\" />\n      </div>\n    )}\n  </Fragment>\n);\n\nStatistics.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.string.isRequired,\n};\n\nexport default Statistics;\n","import React, { Component, Fragment } from 'react';\nimport Section from './Components/Section/Section';\nimport Statictics from './Components/Statistics/Statistics';\nimport PropTypes from 'prop-types';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    isOpen: false,\n  };\n\n  static defaultProps = {\n    step: 1,\n    positiveFeedback: 0,\n  };\n\n  static options = { good: 'Good', neutral: 'Neutral', bad: 'Bad' };\n\n  handleFeedbackIncrement = e => {\n    if (e.target.name === 'Good')\n      this.setState(state => ({\n        good: state.good + this.props.step,\n        isOpen: true,\n      }));\n    else if (e.target.name === 'Neutral')\n      this.setState(state => ({\n        neutral: state.neutral + this.props.step,\n        isOpen: true,\n      }));\n    else if (e.target.name === 'Bad')\n      this.setState(state => ({\n        bad: state.bad + this.props.step,\n        isOpen: true,\n      }));\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return this.state.good !== 0\n      ? (\n        (this.state.good /\n          (this.state.good + this.state.neutral + this.state.bad)) *\n        100\n      ).toFixed(2)\n      : '0';\n  };\n\n  render() {\n    const { neutral } = this.state;\n    const { good } = this.state;\n    const { bad } = this.state;\n    const { isOpen } = this.state;\n    const total = this.countTotalFeedback();\n    const positiveFeedback = this.countPositiveFeedbackPercentage();\n\n    return (\n      <Fragment>\n        <Section\n          title=\"Please leave feedback\"\n          onLeaveFeedback={this.handleFeedbackIncrement}\n          options={App.options}\n        />\n\n        <Statictics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          isOpen={isOpen}\n          positivePercentage={positiveFeedback}\n        ></Statictics>\n      </Fragment>\n    );\n  }\n}\n\nApp.propTypes = {\n  step: PropTypes.number.isRequired,\n  positiveFeedback: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}